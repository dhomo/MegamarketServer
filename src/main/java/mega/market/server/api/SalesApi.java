/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package mega.market.server.api;

import mega.market.server.model.ShopUnitStatisticResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


import javax.validation.Valid;
import javax.validation.constraints.*;
import java.time.LocalDateTime;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-06-22T11:11:10.456Z[GMT]")
@Validated
public interface SalesApi {

    @Operation(summary = "", description = "Получение списка **товаров**, цена которых была обновлена за последние 24 часа включительно [now() - 24h, now()] от времени переданном в запросе. Обновление цены не означает её изменение. Обновления цен удаленных товаров недоступны. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. ", tags={ "Дополнительные задачи" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Список товаров, цена которых была обновлена.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ShopUnitStatisticResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Невалидная схема документа или входные данные не верны.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/sales",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ShopUnitStatisticResponse> salesGet(@NotNull
                                                       @Parameter(
                                                        in = ParameterIn.QUERY,
                                                        description = "Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400",
                                                        required=true,
                                                        schema=@Schema())
                                                       @Valid
                                                       @RequestParam(value = "date", required = true)
                                                       LocalDateTime date);

}

